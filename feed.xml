<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>David Chin</title>
    <description>I am a developer, specialising in front-end web and native application development.</description>
    <link>http://davidchin.me/</link>
    <atom:link href="http://davidchin.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 17 May 2015 10:04:14 +1000</pubDate>
    <lastBuildDate>Sun, 17 May 2015 10:04:14 +1000</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Render tree data structure in AngularJS</title>
        <description>
          
            I came across a problem where I needed to lazily render a navigation menu in a tree structure using AngularJS. The API returns the child pages of a parent page by id. For example, GET `/documents/1` gives you all the subpages of page 1. If you click on one of the subpages, it queries the API again to render its subpages, and so forth.
          
        </description>
        <pubDate>Sat, 09 May 2015 10:00:00 +1000</pubDate>
        <link>http://davidchin.me/blog/render-tree-data-structure-in-angularjs/</link>
        <guid isPermaLink="true">http://davidchin.me/blog/render-tree-data-structure-in-angularjs/</guid>
        
        <category>angularjs</category>
        
        
      </item>
    
      <item>
        <title>Create SEO friendly AngularJS app</title>
        <description>
          
            &lt;p&gt;The biggest problem with AngularJS is that pages you built with it cannot be directly crawled by search engines, because their content is dynamically rendered and therefore not visible in the source code. To get around this problem, you have to pre-render your pages on the server using a JavaScript-enabled headless browser, such as PhantomJS, and then cache the result so that the server doesn’t get hit when crawlers visit the same page again.&lt;/p&gt; &lt;h2 id=&quot;using-a-third-party-service&quot;&gt;Using a third-party service&lt;/h2&gt; &lt;p&gt;The simplest way to achieve this is to use a third-party service, such as &lt;a href=&quot;https://prerender.io/&quot;&gt;prerender.io&lt;/a&gt; It is a paid service...
          
        </description>
        <pubDate>Sat, 10 Jan 2015 11:00:00 +1100</pubDate>
        <link>http://davidchin.me/blog/create-seo-friendly-angularjs-app/</link>
        <guid isPermaLink="true">http://davidchin.me/blog/create-seo-friendly-angularjs-app/</guid>
        
        <category>angularjs</category>
        
        
      </item>
    
      <item>
        <title>Using HttpInterceptor to listen for page load event in AngularJS</title>
        <description>
          
            &lt;p&gt;Often you need to make several GET API requests and fetch a few HTML partials to render an AngularJS page. To know when a page finishes loading, obviously you cannot just listen for &lt;code&gt;DOMContentLoaded&lt;/code&gt; event, because AJAX calls happen afterwards. Instead, you can use a HttpInterceptor to monitor the completion of all GET requests when $location changes.&lt;/p&gt; &lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt; &lt;p&gt;HttpInterceptor acts as middleware allowing you to do extra stuff before and after making a request and receiving a response. To achieve an outcome similar to page ‘ready’ event, you need to keep track of the number of requests...
          
        </description>
        <pubDate>Fri, 03 Oct 2014 10:00:00 +1000</pubDate>
        <link>http://davidchin.me/blog/using-httpinterceptor-to-listen-for-page-load-event/</link>
        <guid isPermaLink="true">http://davidchin.me/blog/using-httpinterceptor-to-listen-for-page-load-event/</guid>
        
        <category>angularjs</category>
        
        
      </item>
    
      <item>
        <title>Disable AngularJS ngAnimate for selected elements</title>
        <description>
          
            There are two ways to disable ngAnimate for selected elements. You can tell Angular to only watch for CSS transitional changes to directive elements if they have a specific class name. Alternatively, if you&#39;re writing your own directive, you can call the `$animate.enabled` method directly to disable animation.
          
        </description>
        <pubDate>Fri, 03 Oct 2014 10:00:00 +1000</pubDate>
        <link>http://davidchin.me/blog/disable-nganimate-for-selected-elements/</link>
        <guid isPermaLink="true">http://davidchin.me/blog/disable-nganimate-for-selected-elements/</guid>
        
        <category>angularjs</category>
        
        
      </item>
    
      <item>
        <title>Using ngAnimate to animate directives in AngularJS</title>
        <description>
          
            AngularJS makes it easy to animate elements using CSS. When ngAnimate module is specified as a dependency, many default Angular directives inherit the ability to automatically add and/or remove classes when certain events occur.
          
        </description>
        <pubDate>Sat, 17 May 2014 10:00:00 +1000</pubDate>
        <link>http://davidchin.me/blog/using-nganimate-to-animate-directives-in-angularjs/</link>
        <guid isPermaLink="true">http://davidchin.me/blog/using-nganimate-to-animate-directives-in-angularjs/</guid>
        
        <category>angularjs</category>
        
        
      </item>
    
      <item>
        <title>AngularJS directives for modifying ngModel values</title>
        <description>
          
            Recently I created a set of AngularJS directives allowing you to prepend or append a string to the model value of a ngModel without affecting its view value. For example, you might want to prepend `http://` to a web address input field instead of asking the user to enter it. And you want this to happen before sending its form to the server.
          
        </description>
        <pubDate>Sun, 27 Apr 2014 10:00:00 +1000</pubDate>
        <link>http://davidchin.me/blog/angularjs-directives-for-modifying-ngmodel-values/</link>
        <guid isPermaLink="true">http://davidchin.me/blog/angularjs-directives-for-modifying-ngmodel-values/</guid>
        
        <category>angularjs</category>
        
        
      </item>
    
      <item>
        <title>Endless scrolling in AngularJS</title>
        <description>
          
            Endless scrolling (or infinite scrolling) can be neatly implement in AngularJS by isolating DOM logic in a directive. It is a useful UI feature allowing users to load the next set of data without having to click on a pagination link or navigate to a different page. However, as more items get loaded and more DOM elements get rendered, front-end performance becomes an issue as more memory gets consumed.
          
        </description>
        <pubDate>Mon, 21 Apr 2014 10:00:00 +1000</pubDate>
        <link>http://davidchin.me/blog/endless-scrolling-in-angularjs/</link>
        <guid isPermaLink="true">http://davidchin.me/blog/endless-scrolling-in-angularjs/</guid>
        
        <category>angularjs</category>
        
        
      </item>
    
      <item>
        <title>Simulate RegEx lookbehind in JavaScript</title>
        <description>
          
            RegEx lookbehind is a very useful tool as it allows you to check whether a string appears before a pattern you try to match. Unfortunately, it is not available in JavaScript - therefore, in order to achieve a similar effect, we have to find another way to fake it.
          
        </description>
        <pubDate>Sat, 12 Apr 2014 10:00:00 +1000</pubDate>
        <link>http://davidchin.me/blog/simulate-regex-lookbehind-in-javascript/</link>
        <guid isPermaLink="true">http://davidchin.me/blog/simulate-regex-lookbehind-in-javascript/</guid>
        
        <category>javascript</category>
        
        
      </item>
    
      <item>
        <title>How to break AngularJS promise chain</title>
        <description>
          
            Using a promise chain is a very powerful way to handle asynchronous calls. Especially, when you need to make API calls sequently, where the second call depends on the response of the first call.
          
        </description>
        <pubDate>Thu, 27 Mar 2014 11:00:00 +1100</pubDate>
        <link>http://davidchin.me/blog/how-to-break-angularjs-promise-chain/</link>
        <guid isPermaLink="true">http://davidchin.me/blog/how-to-break-angularjs-promise-chain/</guid>
        
        <category>angularjs</category>
        
        
      </item>
    
      <item>
        <title>How to check if a CSS rule is supported</title>
        <description>
          
            Sometimes, you want to check if a CSS rule is supported by your user’s current browser using Javascript. For example, you might want to check if the browser supports CSS transition, if not, use jQuery animation as a fallback.
          
        </description>
        <pubDate>Thu, 06 Mar 2014 11:00:00 +1100</pubDate>
        <link>http://davidchin.me/blog/how-to-check-if-a-css-rule-is-supported/</link>
        <guid isPermaLink="true">http://davidchin.me/blog/how-to-check-if-a-css-rule-is-supported/</guid>
        
        <category>javascript</category>
        
        
      </item>
    
  </channel>
</rss>
